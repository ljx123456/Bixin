package com.example.shadow.heartrecreation.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shadow.heartrecreation.db.db.UserDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class UserDBDao extends AbstractDao<UserDB, Long> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity UserDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property Birthday = new Property(2, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Constellation = new Property(3, String.class, "constellation", false, "CONSTELLATION");
        public final static Property Identity = new Property(4, int.class, "identity", false, "IDENTITY");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property RongToken = new Property(7, String.class, "rongToken", false, "RONG_TOKEN");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Token = new Property(9, String.class, "token", false, "TOKEN");
        public final static Property BixinId = new Property(10, int.class, "bixinId", false, "BIXIN_ID");
        public final static Property UserId = new Property(11, int.class, "userId", false, "USER_ID");
        public final static Property Age = new Property(12, int.class, "age", false, "AGE");
        public final static Property Jmpassword = new Property(13, String.class, "jmpassword", false, "JMPASSWORD");
    }


    public UserDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AVATAR\" TEXT," + // 1: avatar
                "\"BIRTHDAY\" TEXT," + // 2: birthday
                "\"CONSTELLATION\" TEXT," + // 3: constellation
                "\"IDENTITY\" INTEGER NOT NULL ," + // 4: identity
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"PHONE\" TEXT," + // 6: phone
                "\"RONG_TOKEN\" TEXT," + // 7: rongToken
                "\"SEX\" TEXT," + // 8: sex
                "\"TOKEN\" TEXT," + // 9: token
                "\"BIXIN_ID\" INTEGER NOT NULL ," + // 10: bixinId
                "\"USER_ID\" INTEGER NOT NULL ," + // 11: userId
                "\"AGE\" INTEGER NOT NULL ," + // 12: age
                "\"JMPASSWORD\" TEXT);"); // 13: jmpassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(4, constellation);
        }
        stmt.bindLong(5, entity.getIdentity());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String rongToken = entity.getRongToken();
        if (rongToken != null) {
            stmt.bindString(8, rongToken);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
        stmt.bindLong(11, entity.getBixinId());
        stmt.bindLong(12, entity.getUserId());
        stmt.bindLong(13, entity.getAge());
 
        String jmpassword = entity.getJmpassword();
        if (jmpassword != null) {
            stmt.bindString(14, jmpassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(4, constellation);
        }
        stmt.bindLong(5, entity.getIdentity());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String rongToken = entity.getRongToken();
        if (rongToken != null) {
            stmt.bindString(8, rongToken);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
        stmt.bindLong(11, entity.getBixinId());
        stmt.bindLong(12, entity.getUserId());
        stmt.bindLong(13, entity.getAge());
 
        String jmpassword = entity.getJmpassword();
        if (jmpassword != null) {
            stmt.bindString(14, jmpassword);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDB readEntity(Cursor cursor, int offset) {
        UserDB entity = new UserDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // birthday
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // constellation
            cursor.getInt(offset + 4), // identity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rongToken
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // token
            cursor.getInt(offset + 10), // bixinId
            cursor.getInt(offset + 11), // userId
            cursor.getInt(offset + 12), // age
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // jmpassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBirthday(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConstellation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdentity(cursor.getInt(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRongToken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBixinId(cursor.getInt(offset + 10));
        entity.setUserId(cursor.getInt(offset + 11));
        entity.setAge(cursor.getInt(offset + 12));
        entity.setJmpassword(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.example.shadow.heartrecreation.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shadow.heartrecreation.db.db.ServePersonnelDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVE_PERSONNEL_DB".
*/
public class ServePersonnelDBDao extends AbstractDao<ServePersonnelDB, Long> {

    public static final String TABLENAME = "SERVE_PERSONNEL_DB";

    /**
     * Properties of entity ServePersonnelDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServeID = new Property(1, String.class, "serveID", false, "SERVE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Money = new Property(4, String.class, "money", false, "MONEY");
        public final static Property Lon = new Property(5, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(6, String.class, "lat", false, "LAT");
        public final static Property Age = new Property(7, String.class, "age", false, "AGE");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Adds = new Property(9, String.class, "adds", false, "ADDS");
        public final static Property Join = new Property(10, String.class, "join", false, "JOIN");
    }


    public ServePersonnelDBDao(DaoConfig config) {
        super(config);
    }
    
    public ServePersonnelDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVE_PERSONNEL_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVE_ID\" TEXT," + // 1: serveID
                "\"NAME\" TEXT," + // 2: name
                "\"IMAGE\" TEXT," + // 3: image
                "\"MONEY\" TEXT," + // 4: money
                "\"LON\" TEXT," + // 5: lon
                "\"LAT\" TEXT," + // 6: lat
                "\"AGE\" TEXT," + // 7: age
                "\"SEX\" TEXT," + // 8: sex
                "\"ADDS\" TEXT," + // 9: adds
                "\"JOIN\" TEXT);"); // 10: join
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVE_PERSONNEL_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServePersonnelDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serveID = entity.getServeID();
        if (serveID != null) {
            stmt.bindString(2, serveID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(5, money);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(8, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String adds = entity.getAdds();
        if (adds != null) {
            stmt.bindString(10, adds);
        }
 
        String join = entity.getJoin();
        if (join != null) {
            stmt.bindString(11, join);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServePersonnelDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serveID = entity.getServeID();
        if (serveID != null) {
            stmt.bindString(2, serveID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(5, money);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(8, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String adds = entity.getAdds();
        if (adds != null) {
            stmt.bindString(10, adds);
        }
 
        String join = entity.getJoin();
        if (join != null) {
            stmt.bindString(11, join);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ServePersonnelDB readEntity(Cursor cursor, int offset) {
        ServePersonnelDB entity = new ServePersonnelDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serveID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // money
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // adds
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // join
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ServePersonnelDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServeID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoney(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdds(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJoin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ServePersonnelDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ServePersonnelDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ServePersonnelDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
